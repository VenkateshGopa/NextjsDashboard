<button onClick={show} id="dropdownButton" data-dropdown-toggle="dropdown" className=" relative float-right m-8 text-white  bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2.5 text-center inline-flex items-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" type="button">Dropdown button <svg className="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7"></path></svg></button>
        <div id="dropdown" className=" absolute right-8 top-20 hidden z-10 w-44 text-base list-none bg-white rounded divide-y divide-gray-100 shadow dark:bg-gray-700">
            <ul className="py-1" aria-labelledby="dropdownButton">
            <li>
                <a href="#" className="block py-2 px-4 text-sm text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 dark:text-gray-200 dark:hover:text-white">Dashboard</a>
            </li>
            <li>
                <a href="#" className="block py-2 px-4 text-sm text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 dark:text-gray-200 dark:hover:text-white">Settings</a>
            </li>
            <li>
                <a href="#" className="block py-2 px-4 text-sm text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 dark:text-gray-200 dark:hover:text-white">Earnings</a>
            </li>
            <li>
                <a href="#" className="block py-2 px-4 text-sm text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 dark:text-gray-200 dark:hover:text-white">Sign out</a>
            </li>
            </ul>
        </div>


        // setloading(true)
        //   axios.request( {
        //     method: 'GET',
        //     url: `https://vaccovid-coronavirus-vaccine-and-treatment-tracker.p.rapidapi.com/api/npm-covid-data/country-report-iso-based/${states.Country}/${states.ThreeLetterSymbol}`,
        //     headers: {
        //       'x-rapidapi-host': 'vaccovid-coronavirus-vaccine-and-treatment-tracker.p.rapidapi.com',
        //       'x-rapidapi-key': '0dcb4bd39fmshe0af6d8719d5217p172434jsn1f9be1248561'
        //     }
        //   }).then(function (response) {
        //     // setstates(response.data);
        //     setdata([{name:"ActiveCases" ,value:response.data[0].ActiveCases }, {name:"TotalDeaths" ,value:response.data[0].TotalDeaths},{name:"TotalRecovered" ,value: +response.data[0].TotalRecovered} ])
        //     console.log(response.data);
        //     setloading(false)
        //   }).catch(function (error) {
        //     console.error(error);
        //   });


        iso--------------------------------------------------------

        // const [data, setdata] = useState<datatype[]>([]);
  // const router = useRouter();
  // useEffect(()=>{
  //   if(!router.isReady) return;
  //   const getdata = async() => {
  //     const res= await axios.request({
  //         method: 'GET',
  //         url: 'https://vaccovid-coronavirus-vaccine-and-treatment-tracker.p.rapidapi.com/api/npm-covid-data/countries-name-ordered',
  //         headers: {
  //         'x-rapidapi-host': 'vaccovid-coronavirus-vaccine-and-treatment-tracker.p.rapidapi.com',
  //         'x-rapidapi-key': '0dcb4bd39fmshe0af6d8719d5217p172434jsn1f9be1248561'
  //         }
  //     })
  //    setdata(res.data.filter( (ele: { ThreeLetterSymbol: string }) => ele.ThreeLetterSymbol === router.query.iso));
  // }
  // getdata();
  // },[router])
  ------------------------------------------------------------------------------------------------------------------
  PICCHART

  //     const res= await axios.request({
        //         method: 'GET',
        //         url: 'https://vaccovid-coronavirus-vaccine-and-treatment-tracker.p.rapidapi.com/api/npm-covid-data/countries-name-ordered',
        //         headers: {
        //         'x-rapidapi-host': 'vaccovid-coronavirus-vaccine-and-treatment-tracker.p.rapidapi.com',
        //         'x-rapidapi-key': '0dcb4bd39fmshe0af6d8719d5217p172434jsn1f9be1248561'
        //         }
        //     })
        //    const search = res.data.find( (ele: { ThreeLetterSymbol: string }) => ele.ThreeLetterSymbol === router.query.iso)

  ------------------------------------------------------------------------------------------------------------------


import axios from "axios";
import { NextPage } from "next";
import { useEffect, useState } from "react";
import { Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from "recharts";
import Spinner from "./components/Spinner";

const test1:NextPage = () =>{

    const [data ,setdata]= useState([]);
    // const [loading , setloading] = useState<boolean>(true);

    useEffect(()=> {
    
        axios.request({
            method: "GET",
            url: "https://coingecko.p.rapidapi.com/coins/bitcoin/market_chart",
            params: { vs_currency: "usd", days: "30" },
            headers: {"x-rapidapi-host": "coingecko.p.rapidapi.com",
            "x-rapidapi-key": "d69ecb9af6mshcaf62ccf31fb078p14d543jsn0a68e23b8093",
        },
    }).then(function (response: any) {
        // const price :[] = []; 
        // response.data.prices.map( (ele: any[]) => price.push({ x:ele[0], y:ele[1] }))
        // setdata(price);
        setdata(response.data)
        // setloading(false)
    }).catch(function (error: any) {
        console.error(error);
    }) },[])

    return(
        <div className="mt-32">
            <p></p>
            {console.log(data)}
        {/* <p className="text-white text-5xl mx-6">Bitcoin</p>
        {loading && <div className="m-16 p-12"><Spinner/></div>}    
        {!loading &&
            <ResponsiveContainer width="100%" height={250}>
            <LineChart  data={data} >
            <XAxis
            tick={{ fill: "white" }}
            dataKey="x"
            padding={{ left: 30, right: 30 }}
            style={{fontSize: '0.5rem',}}
            />
            <YAxis tick={{ fill: "white" }} style={{fontSize: '0.5rem',}}/>
            <Tooltip />
            <Legend />
            <Line
            type="monotone"
            dataKey="y"
            stroke="#8884d8"
            activeDot={{ r: 8 }}
            dot={false} 
            />
        </LineChart>
        </ResponsiveContainer>} */}
        </div>
    );
}

export default test1;

// function ele(ele: any) {
//     throw new Error("Function not implemented.");
// }


pagination-------------------------------------------------------------------------------------------------------------


 {/* <div className="flex items-center">
    <div className="flex flex-row pt-10 gap-1 m-auto" >
        <button className="p-1 dark:bg-slate-200 bg-gray-700 dark:text-black text-white hover:cursor-pointer disabled:cursor-not-allowed disabled:bg-red-400 dark:disabled:bg-red-400" onClick={() => req("p")} disabled={page<=1}> Prev</button>
        { (page===1 || page ===2 || page === 3) && 
        <>
        <p className="p-1 px-2 dark:bg-slate-200 bg-gray-700 dark:text-black text-white hover:cursor-pointer" onClick={() => req(1)}>1</p>
        <p className="p-1 px-2 dark:bg-slate-200 bg-gray-700 dark:text-black text-white hover:cursor-pointer" onClick={() => req(2)}>2</p>
        <p className="p-1 px-2 dark:bg-slate-200 bg-gray-700 dark:text-black text-white hover:cursor-pointer" onClick={() => req(3)}>3</p>
        <p className="p-1 px-2 dark:bg-slate-200 bg-gray-700 dark:text-black text-white hover:cursor-pointer" onClick={() => req(4)}>4</p>
        <p className="p-1 px-2 dark:bg-slate-200 bg-gray-700 dark:text-black text-white hover:cursor-pointer" onClick={() => req(5)}>5</p>
        </>}
        { (page>3 && typeof data?.numberofpages === "number" && page <= data?.numberofpages-2 )&& 
        <>
        <p className="p-1 px-2 dark:bg-slate-200 bg-gray-700 dark:text-black text-white hover:cursor-pointer" onClick={() => req(page-2)}>{page-2}</p>
        <p className="p-1 px-2 dark:bg-slate-200 bg-gray-700 dark:text-black text-white hover:cursor-pointer" onClick={() => req(page-1)}>{page-1}</p>
        <p className="p-1 px-2 dark:bg-slate-200 bg-gray-700 dark:text-black text-white hover:cursor-pointer" onClick={() => req(page)}>{page}</p>
        <p className="p-1 px-2 dark:bg-slate-200 bg-gray-700 dark:text-black text-white hover:cursor-pointer" onClick={() => req(page+1)}>{page+1}</p>
        <p className="p-1 px-2 dark:bg-slate-200 bg-gray-700 dark:text-black text-white hover:cursor-pointer" onClick={() => req(page+2)}>{page+2}</p>
        </>}

        { ( typeof data?.numberofpages === "number" && page > data?.numberofpages-2 )&& 
        <>
        <p className="p-1 px-2 dark:bg-slate-200 bg-gray-700 dark:text-black text-white hover:cursor-pointer" onClick={() => req(data?.numberofpages-4)}>{data?.numberofpages-4}</p>
        <p className="p-1 px-2 dark:bg-slate-200 bg-gray-700 dark:text-black text-white hover:cursor-pointer" onClick={() => req(data?.numberofpages-3)}>{data?.numberofpages-3}</p>
        <p className="p-1 px-2 dark:bg-slate-200 bg-gray-700 dark:text-black text-white hover:cursor-pointer" onClick={() => req(data?.numberofpages-2)}>{data?.numberofpages-2}</p>
        <p className="p-1 px-2 dark:bg-slate-200 bg-gray-700 dark:text-black text-white hover:cursor-pointer" onClick={() => req(data?.numberofpages-1)}>{data?.numberofpages-1}</p>
        <p className="p-1 px-2 dark:bg-slate-200 bg-gray-700 dark:text-black text-white hover:cursor-pointer" onClick={() => req(data?.numberofpages)}>{data?.numberofpages}</p>
        </>}
        
        <button className="p-1 dark:bg-slate-200 bg-gray-700 dark:text-black text-white hover:cursor-pointer disabled:cursor-not-allowed disabled:bg-red-400 dark:disabled:bg-red-400" disabled={page=== data?.numberofpages} onClick={() => req("n")}> Next </button>
    </div>
    </div> */}

-------------------------------------------------------------------------------------------------------------pagination



import axios from "axios";
import { NextPage } from "next";
import { useEffect, useState } from "react";
import Pagination from "./components/Pagination";
import Spinner from "./components/Spinner";

interface data {
    _id:string
    Country:string
    TwoLetterSymbol:string
    ThreeLetterSymbol:string
    Infection_Risk:number
    Case_Fatality_Rate:number
    Test_Percentage:number
    Recovery_Proporation:number
    TotalCases:number
    NewCases:number
    TotalDeaths:number
    NewDeaths:number
    TotalRecovered:number
    NewRecovered:number
    ActiveCases:number
    TotalTests:number
    Population:number
    Serious_Critical:number
}
interface pagnination {
    page:number
    pagesize:number 
    records:number
    numberofpages: number
    data: data []
}
interface urlreq {
    page:number
    pagesize:number
    sort:string
    sorttype:boolean
}
const Table:NextPage = () => {
    const [data, setdata] = useState<pagnination>();
    const [loading, setloading] = useState<boolean>(true);
    const [page, setpage] = useState<number>(1);
    const [pagesize, setpagesize] = useState<number>(10);
    const [show, setshow] = useState<boolean>(false);

    const[showdata , setshowdata] = useState<boolean>(true);
    const[sort , setsort] = useState<string>("Select");


    useEffect( () =>{
        setloading(true)
        axios.get('http://localhost:3001/country?page=1&pagesize=10').then((response) => {setdata(response.data) ; setloading(false) }).catch((error) => console.log(error))
    },[])

    const allreq= () => {

    }
    const changeHandler = (event:any) =>{
        setpage(1)
        setloading(true);
        setpagesize(event.target.value);
        axios.get(`http://localhost:3001/country?page=1&pagesize=${+event.target.value}`).then((response) => {setdata(response.data) ; setloading(false) }).catch((error) => console.log(error))
    }
    const req = (type:string|number) =>{
        if(typeof type === "string"){
            if(type === 'p'){ 
              setpage((prev) => prev-1)
              axios.get(`http://localhost:3001/country?page=${page-1}&pagesize=${pagesize}`).then((response) => {setdata(response.data) ; setloading(false) }).catch((error) => console.log(error))
            }
            else{
                setpage((prev) => prev+1)
                axios.get(`http://localhost:3001/country?page=${page+1}&pagesize=${pagesize}`).then((response) => {setdata(response.data) ; setloading(false) }).catch((error) => console.log(error))
            }
        }
        else{
            setpage(type)
            axios.get(`http://localhost:3001/country?page=${type}&pagesize=${pagesize}`).then((response) => {setdata(response.data) ; setloading(false) }).catch((error) => console.log(error))
        }
    }
    const reqs = () =>{
        axios.get(`http://localhost:3001/country?page=${page}&pagesize=${pagesize}&sort=${sort}:${showdata ? 'asc' : 'desc'}`).then((response) => {setdata(response.data) ; setloading(false) }).catch((error) => console.log(error))
        setshow(false)
    }
    const showhandler = () =>{
        setshow((prev) => !prev)
    }
    const sorthandler = (event:any) =>{
        setsort(event.target.value)
    }
    const checkhand = (event:any) =>{
        setshowdata( event.target.value!=='desc')
        console.log(event.target.value)
    }

  return (
    <div className="mt-36">
    { show && <>
    <div className="fixed top-0 left-0 w-screen h-screen bg-black opacity-50 z-10" ></div>
    <div className="fixed sm:top-1/4 sm:w-1/2 sm:left-1/4 w-11/12  dark:bg-slate-900 bg-slate-200 rounded shadow-2xl z-20">
        <div className="flex flex-col ">
            <div>
               <p className="bg-red-400 px-2 m-2 float-right hover:cursor-pointer hover:bg-red-500 rounded" onClick={showhandler} >x</p>
            </div>
            <div className="flex flex-row m-5 dark:text-slate-200 text-black">
                <p>Sort:</p>
                <select className="ml-2 bg-slate-200 dark:bg-slate-500 rounded shadow-lg" onChange={sorthandler} value={sort}>
                    <option value="Select">Select Field</option>
                    <option value="Country">Country</option>
                    <option value="ThreeLetterSymbol"> ISO</option>
                    <option value="Population">Population</option>
                    <option value="TotalTests">TotalTests</option>
                    <option value="TotalCases">TotalCases</option>
                    <option value="ActiveCases">ActiveCases</option>
                    <option value="TotalRecovered">Recovered</option>
                    <option value="TotalDeaths">Deaths</option>
                </select>
                <div className="flex flex-row items-center px-2">
                <input className="mx-1" type="radio" name="sort" value="asc" checked={showdata} onChange={checkhand} /> 
                <p>ASC</p>
                <input className="mx-1" type="radio" name="sort" value="desc" checked={!showdata} onChange={checkhand}/>
                <p>Dsc</p>
                </div>
            </div>
        </div>
        <button className="m-7 px-2 py-1 dark:text-black text-slate-200 dark:bg-slate-200 bg-black rounded float-right" onClick={reqs} >Submit</button>

    </div>
    </>}

    <div className="flex flex-row items-center m-5 float-right">
    <button className=" dark:bg-white px-4 py-1 mr-2 bg-black text-white dark:text-black rounded " onClick={showhandler} >Filters</button>
    <p className="dark:text-white text-black mr-4">Per page:</p>
        <select className="dark:bg-slate-600 dark:text-slate-200 text-black bg-white w-14 rounded" value={pagesize} onChange={changeHandler}>
            <option value={10} > 10</option>
            <option value={20} > 20</option>
            <option value={30} > 30</option>
            <option value={40} > 40</option>
            <option value={50} > 50</option>
        </select>
    </div>

    {/* className="fixed top-2/4 left-2/4" */}
    {loading && <div> <Spinner/></div> }
    <table className=" table-fixed dark:bg-black bg-white text-black dark:text-white tableborder w-11/12 m-auto">
      <thead >
        <tr className="tableborder" > 
          <th className="tableborder" >Country</th>
          {/* <th className="tableborder" > ISO(2) </th> */}
          <th className="tableborder" >ISO CODE</th>
          <th className="tableborder" >Population</th>
          <th className="tableborder" >TotalTests</th>
          <th className="tableborder" >TotalCases</th>
          <th className="tableborder" >ActiveCases</th>
          <th className="tableborder" >Recovered</th>
          <th className="tableborder" >Deaths</th>
        </tr>
      </thead>
      <tbody>
          {!loading &&
           data?.data.map( ele => <tr className="tableborder" key={ele._id} >
              <td className="tableborder" >{ele.Country}</td>
              {/* <td className="tableborder"  >{ele.TwoLetterSymbol}</td> */}
              <td className="tableborder" >{ele.ThreeLetterSymbol}</td>
              <td className="tableborder" >{ele.Population}</td>
              <td className="tableborder" >{ele.TotalTests}</td>
              <td className="tableborder" >{ele.TotalCases}</td>
              <td className="tableborder" >{ele.ActiveCases}</td>
              <td className="tableborder"  >{ele.TotalRecovered}</td>
              <td className="tableborder"  >{ele.TotalDeaths}</td>
              </tr>)}
      </tbody>
    </table>

    <Pagination page={page} numberofpages={typeof data?.numberofpages === "number" ? data?.numberofpages : 0} req={req} />
    </div>
  );
};

export default Table;


if(url.filter === "Select" && url.sort === "Select" )
        axios.get(`http://localhost:3001/country?page=${url.page}&pagesize=${url.pagesize}`).then((response) => {setdata(response.data) ; setloading(false) }).catch((error) => console.log(error))
    
        else if (url.sort !== "Select" && url.filter !== "Select" && (url.min < url.max) && (url.max!== -1 || url.min!== -1))
        axios.get(`http://localhost:3001/country?page=${url.page}&pagesize=${url.pagesize}&sort=${url.sort}:${url.sorttype ? 'asc' : 'desc'}&filter=${url.filter}:gt-${url.min},${url.filter}:lt-${url.max} `).then((response) => {setdata(response.data) ; setloading(false) }).catch((error) => console.log(error))

        else if (url.sort !== "Select")
        axios.get(`http://localhost:3001/country?page=${url.page}&pagesize=${url.pagesize}&sort=${url.sort}:${url.sorttype ? 'asc' : 'desc'}`).then((response) => {setdata(response.data) ; setloading(false) }).catch((error) => console.log(error))

        else if (url.filter !== "Select" && (url.min < url.max) && (url.max!== -1 || url.min!== -1) )
        axios.get(`http://localhost:3001/country?page=${url.page}&pagesize=${url.pagesize}&filter=${url.filter}:gt-${url.min},${url.filter}:lt-${url.max}`).then((response) => {setdata(response.data) ; setloading(false) }).catch((error) => console.log(error))